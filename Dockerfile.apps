FROM greenbox:2.1.3

ARG DOCKER_PROXY=172.17.0.4

RUN echo "docker proxy: $DOCKER_PROXY" \
 && echo "Acquire::HTTP::Proxy \"http://$DOCKER_PROXY:3142\";" > /etc/apt/apt.conf.d/01proxy \
 && echo 'Acquire::HTTPS::Proxy "false";' >> /etc/apt/apt.conf.d/01proxy

RUN apt-get update

ENV LOGROTATE_VER=3.10.0
RUN apt-get install -y libpopt-dev
RUN curl -k -LO https://github.com/logrotate/logrotate/releases/download/$LOGROTATE_VER/logrotate-$LOGROTATE_VER.tar.gz &&\
   tar xvf logrotate-$LOGROTATE_VER.tar.gz &&\
   cd /logrotate-$LOGROTATE_VER &&\
   export LDFLAGS="-static" && ./configure --prefix=/opt/apps/green &&\
   make && make install &&  mkdir -p /opt/apps/green/bin && mv /opt/apps/green/sbin/* /opt/apps/green/bin &&\
   ls -lh /opt/apps/green/bin/logrotate


# https://www.vagrantup.com/downloads.html
ENV VAGRANT_VER 1.8.6
RUN curl -k -LO https://releases.hashicorp.com/vagrant/${VAGRANT_VER}/vagrant_${VAGRANT_VER}_x86_64.deb &&\
    dpkg -i vagrant_${VAGRANT_VER}_x86_64.deb


# ==== vim ====
RUN apt-get -y install libssl-dev libncurses5-dev python-dev ruby-dev &&\
    cd / && git clone https://github.com/vim/vim.git &&\
    cd /vim && export LDFLAGS="-static" && ./configure --with-compiledby='Ernad <hernad@bring.out.ba>'  \
               --with-x=no  --disable-gui  --disable-netbeans  \
               --disable-pythoninterp  --disable-python3interp \
               --disable-rubyinterp  --disable-luainterp \
               --prefix=/opt/apps/vim &&\
     make &&\
     make install &&\
     cd /opt/apps/vim/share/vim && ls -l && mv vim??/* . && rmdir vim??

# ===== neovim ==============
# RUN  apt-get install -y apt-utils libtool autoconf automake cmake g++ pkg-config unzip &&\
#     mkdir -p /opt/apps/neovim ; cd /neovim &&\
#     make || make || make ; cmake -DCMAKE_INSTALL_PREFIX:PATH=/opt/apps/nvim &&\
#     make all install

# ====== python2 ==============
# https://pypi.python.org/pypi/pip
# https://github.com/docker-library/python/blob/master/2.7/wheezy/Dockerfile
# if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG=C.UTF-8 PYTHON_VERSION=2.7.12 PYTHON_PIP_VERSION=8.1.2

ENV PATH  /opt/apps/python2/bin:$PATH

# gpg: key 18ADD4FF: public key "Benjamin Peterson <benjamin@python.org>" imported
RUN gpg --keyserver ha.pool.sks-keyservers.net --recv-keys C01E1CAD5EA2C4F0B8E3571504C367C218ADD4FF &&\
    apt-get purge -y python.* &&\
    apt-get install -y bzip2 libbz2-dev &&\
    set -x \
	&& mkdir -p /usr/src/python \
	&& curl -SL "https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz" -o python.tar.xz \
	&& curl -SL "https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tar.xz.asc" -o python.tar.xz.asc \
	&& gpg --verify python.tar.xz.asc \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz* \
	&& cd /usr/src/python \
	&& ./configure --prefix=/opt/apps/python2 --enable-shared --enable-unicode=ucs4 \
	&& make -j$(nproc) \
	&& make install

ENV  LD_LIBRARY_PATH=/opt/apps/python2/lib
RUN     curl -SL 'https://bootstrap.pypa.io/get-pip.py' | python2 \
	&& pip install --no-cache-dir --upgrade pip==$PYTHON_PIP_VERSION \
	&& find /usr/local \
		\( -type d -a -name test -o -name tests \) \
		-o \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
		-exec rm -rf '{}' + \
	&& rm -rf /usr/src/python \
        && pip install --no-cache-dir virtualenv


# ================= /opt/apps/green =========================================================

RUN mkdir -p /opt/apps/green/bin &&\
    cd / && curl -LO https://download.samba.org/pub/rsync/src/rsync-3.1.1.tar.gz &&\
    tar xvf rsync-3.1.1.tar.gz &&\
    cd /rsync-3.1.1 && ./configure && make && /usr/bin/install -c  -m 755 rsync /opt/apps/green/bin

# Pipe Viewer - is a terminal-based tool for monitoring the progress of data through a pipeline.
RUN curl -LO http://www.ivarch.com/programs/sources/pv-1.6.0.tar.gz  &&\
    tar xvf pv-1.6.0.tar.gz  &&\
    cd /pv-1.6.0 && ./configure && make && /usr/bin/install -c pv /opt/apps/green/bin

RUN cd /tmp && curl -LO https://www.openfabrics.org/downloads/qperf/qperf-0.4.9.tar.gz &&\
    tar xvf qperf-0.4.9.tar.gz &&\
    cd /tmp/qperf-0.4.9 && sh autogen.sh && \
    ./configure && make && /usr/bin/install -c src/qperf /opt/apps/green/bin &&\
    cd /tmp && rm qperf-0.4.9.tar.gz && rm -r -f qperf-0.4.9

RUN curl -LO https://github.com/zfsonlinux/zfs-auto-snapshot/archive/master.zip &&\
    unzip master.zip &&\
    cd zfs-auto-snapshot-master && /usr/bin/install src/zfs-auto-snapshot.sh /opt/apps/green/bin/zfs-auto-snapshot


# --------- tmux & libevent install ------------
RUN curl -LO  https://github.com/libevent/libevent/releases/download/release-2.0.22-stable/libevent-2.0.22-stable.tar.gz &&\
    tar xvf libevent-2.0.22-stable.tar.gz &&\
    cd /libevent-2.0.22-stable && sh autogen.sh && ./configure && make install &&\
    ( [  -d /opt/apps/green/lib ] || mkdir -p /opt/apps/green/lib ) &&\
    cp .libs/*so* /opt/apps/green/lib

RUN git clone https://github.com/ThomasAdam/tmux.git tmux &&\
    cd tmux && sh autogen.sh && export LD_LIBRARY_PATH=/opt/apps/green/lib && ./configure && make &&\
    ( [  -d /opt/apps/green/bin ] || mkdir -p /opt/apps/green/bin ) &&\
    cp tmux /opt/apps/green/bin/tmux && chmod +x /opt/apps/green/bin/tmux &&\
    cp /usr/lib/x86_64-linux-gnu/libtinfo.so /opt/apps/green/lib/libtinfo.so.5

RUN  apt-get install -y automake pkg-config libpcre3-dev zlib1g-dev liblzma-dev &&\
     cd / ; git clone https://github.com/ggreer/the_silver_searcher.git &&\
     cd the_silver_searcher && export LDFLAGS="-static" && ./build.sh --prefix=/opt/apps/green &&\
     make install

# ---------- tcpdump -----------------------------
RUN apt-get install -y bison flex &&\
    curl -LO http://www.tcpdump.org/release/libpcap-1.7.4.tar.gz && tar xvf libpcap-1.7.4.tar.gz && cd libpcap-1.7.4 &&\
    ./configure --prefix=/opt/apps/tcpdump &&\
    make install &&\
    cd / && curl -LO http://www.tcpdump.org/release/tcpdump-4.7.4.tar.gz && tar xvf tcpdump-4.7.4.tar.gz && cd tcpdump-4.7.4 &&\
    ./configure --prefix=/opt/apps/tcpdump --libdir=/opt/apps/tcpdump/lib &&\
    make install &&\
    cd /opt/apps/tcpdump && mv sbin/* bin/

# ---------- fio http://jrs-s.net/2015/11/23/fio-cheat-sheet/ ------------
RUN git clone git://git.kernel.dk/fio.git &&\
    cd fio && ./configure --prefix=/opt/apps/green &&\
    make install

#Version 20151002 md5=b2d20c4d880518c5fb8f8db734962f45
# http://www.maier-komor.de/software/mbuffer/mbuffer-20151002.tgz
RUN export MBUFFER_VER="20151002" && echo "mbuffer ver: $MBUFFER_VER" && curl -LO http://www.maier-komor.de/software/mbuffer/mbuffer-${MBUFFER_VER}.tgz &&\
    cd / && tar xvf mbuffer-${MBUFFER_VER}.tgz && cd mbuffer-${MBUFFER_VER} && ./configure --prefix=/opt/apps/green &&\
    make install

RUN  export LZO_VER=2.09 && curl -LO http://www.oberhumer.com/opensource/lzo/download/lzo-${LZO_VER}.tar.gz &&\
     tar xvf lzo-${LZO_VER}.tar.gz && cd lzo-${LZO_VER} && ./configure --prefix=/opt/apps/green &&\
     make install && ls -lr /opt/apps/green

RUN  export LD_LIBRARY_PATH=/opt/apps/green/lib &&\
     export CPPFLAGS="-I/opt/apps/green/include -L/opt/apps/green/lib" &&\
     export LDFLAGS="-L/opt/apps/green/lib" &&\
     export LZOP_VER=1.03 && cd / && curl -LO http://www.lzop.org/download/lzop-${LZOP_VER}.tar.gz &&\
     tar xvf lzop-${LZOP_VER}.tar.gz && cd lzop-${LZOP_VER} &&\
     ./configure --prefix=/opt/apps/green && make install

RUN export PERL5_VER=5.22.1 && cd / && curl -LO http://www.cpan.org/src/5.0/perl-${PERL5_VER}.tar.gz &&\
    tar xvf perl-${PERL5_VER}.tar.gz &&  cd perl-${PERL5_VER} &&\
    ./Configure -des -Dprefix=/opt/apps/perl5 && make install

RUN  export PCIUTILS_VER=3.4.0 && cd / && curl -LO ftp://atrey.karlin.mff.cuni.cz/pub/linux/pci/pciutils-${PCIUTILS_VER}.tar.gz &&\
    tar xvf pciutils-${PCIUTILS_VER}.tar.gz && cd pciutils-${PCIUTILS_VER} &&\
    make && make PREFIX= DESTDIR=/opt/apps/green  install


#http://libguestfs.org/download/1.31-development/libguestfs-1.31.30.tar.gz

RUN     apt-get install -y libusb-1.0-0 libusb-1.0-0-dev libudev1 libudev-dev &&\
        git clone https://github.com/gregkh/usbutils.git &&\
        cp /usr/lib/x86_64-linux-gnu/libusb*.so /opt/apps/green/lib &&\
        cp /usr/lib/x86_64-linux-gnu/libudev*.so /opt/apps/green/lib &&\
	cd usbutils && git submodule init && git submodule update &&\
	./autogen.sh --prefix=/opt/apps/green &&\
	make && make install

# ------- docker-compose
# https://github.com/docker/compose/releases/
RUN export DOCKER_COMPOSE_VER=1.8.1 && \
    curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VER}/docker-compose-Linux-x86_64 > /opt/apps/green/bin/docker-compose &&\
    chmod +x /opt/apps/green/bin/docker-compose



RUN  apt-get update -y &&\
     apt-get -y install gcc libffi-dev libssl-dev python2.7 python2.7-dev  &&\
     ln -s /opt/apps/python2 /opt/python2

# ----- flocker 1.8.0
#RUN ln -s /opt/apps/python2 /opt/python2 &&\
#    cd /opt && /opt/python2/bin/virtualenv --python=/opt/python2/bin/python flocker &&\
#    cd /opt/flocker &&\
#    . bin/activate && pip install --upgrade pip &&\
#    cd / &&  git clone https://github.com/ClusterHQ/flocker.git

#RUN cd /opt/flocker &&\
#    . bin/activate &&\
#    cd /flocker &&\
#    pip install --upgrade setuptools &&\
#    pip install pbr &&\
#    pip install pycparser &&\
#    pip install twisted --verbose &&\
#    pip install . &&\
#    cp /usr/lib/x86_64-linux-gnu/libcrypto.so.1.0.0 /opt/flocker/lib/ &&\
#    cp /usr/lib/x86_64-linux-gnu/libssl.so.1.0.0 /opt/flocker/lib/


# --- pipework in green
RUN  cd /opt/apps/green/bin &&  curl -LO https://raw.githubusercontent.com/jpetazzo/pipework/master/pipework &&\
     chmod +x pipework

RUN  apt-get update -y && apt-get install -y bridge-utils openvswitch-switch &&\
     cp /sbin/brctl /opt/apps/green/bin/ &&\
     cp `which ovs-vsctl` /opt/apps/green/bin/ &&\
     cp `which truncate` /opt/apps/green/bin/



# --- aws cli
RUN cd /opt/apps &&\
    /opt/python2/bin/virtualenv --python=/opt/python2/bin/python aws &&\
    cd /opt/apps/aws &&\
    . bin/activate && pip install --upgrade pip &&\
    pip install awscli



ENV GOLANG_VER=1.7.3
RUN curl -LO https://storage.googleapis.com/golang/go${GOLANG_VER}.linux-amd64.tar.gz &&\
    tar xf go${GOLANG_VER}.linux-amd64.tar.gz &&\
    ls -ld go* ; mv go /opt/apps/go &&\
    rm -rf /opt/app/go/test &&\
    rm go${GOLANG_VER}.linux-amd64.tar.gz

ENV NODEJS_VER=6.9.1
RUN curl -LO https://nodejs.org/dist/v${NODEJS_VER}/node-v${NODEJS_VER}-linux-x64.tar.xz &&\
   tar xf node-v${NODEJS_VER}-linux-x64.tar.xz &&\
   ls -ld node* ; mv node-v${NODEJS_VER}-linux-x64 /opt/apps/node &&\
   rm node-v${NODEJS_VER}-linux-x64.tar.xz

ENV JAVA8_UPD 112
ENV JAVA8_BUILD 15
ENV JAVA_HOME /opt/apps/java
RUN     cd /tmp \
        && wget -qO jdk8.tar.gz \
         --header "Cookie: oraclelicense=accept-securebackup-cookie" \
         http://download.oracle.com/otn-pub/java/jdk/8u${JAVA8_UPD}-b${JAVA8_BUILD}/jdk-8u${JAVA8_UPD}-linux-x64.tar.gz \
        && tar xzf jdk8.tar.gz -C /opt \
        && mv /opt/jdk* ${JAVA_HOME} \
        && rm /tmp/jdk8.tar.gz \
        && update-alternatives --install /usr/bin/java java $JAVA_HOME/bin/java 100 \
        && update-alternatives --install /usr/bin/javac javac $JAVA_HOME/bin/javac 100 \
        && update-alternatives --install /usr/bin/jar jar $JAVA_HOME/bin/jar 100 \
        && update-alternatives --set java $JAVA_HOME/bin/java \
        && update-alternatives --set jar $JAVA_HOME/bin/jar \
        && java -version


RUN curl -LO https://github.com/atom/atom/releases/download/v1.11.2/atom-amd64.deb &&\
    dpkg -i atom-amd64.deb || apt-get install -f -y &&\
    mv /usr/share/atom /opt/apps/atom  &&\
    mkdir -p /opt/apps/atom/bin &&  mv /opt/apps/atom/atom /opt/apps/atom/bin/

# https://github.com/prasmussen/gdrive
RUN curl -L https://docs.google.com/uc?id=0B3X9GlR6EmbnQ0FtZmJJUXEyRTA\&export=download > /opt/apps/green/bin/gdrive &&\
   ls /opt/apps/green/bin/gdrive ; chmod +x /opt/apps/green/bin/gdrive

# visual studio code 
RUN curl -L https://go.microsoft.com/fwlink/?LinkID=620884 > code.tar.gz 
RUN tar xf code.tar.gz && mv VSCode-linux-x64 /opt/apps/code &&\
    rm code.tar.gz

ENV IDEA_VER=2016.2.5
RUN cd /opt/apps && curl -LO https://download.jetbrains.com/idea/ideaIC-${IDEA_VER}-no-jdk.tar.gz &&\
     tar xf ideaIC-${IDEA_VER}-no-jdk.tar.gz &&\
     rm -rf ideaIC*.tar.gz &&\
     mv idea-IC-* idea

# /opt/apps/x11/share/{xcb,locale}
RUN echo "X11 `ls -ld /usr/share/X11/*`"  && cp -av /usr/share/X11/* /opt/apps/x11/share/ &&\
   rm -rf $ROOTFS/usr/local/share/X11

# visual studio code deps
RUN apt-get -y install libxss1

COPY extract_so_deps.sh /
RUN bash  /extract_so_deps.sh
