#!/bin/bash
. /etc/green_common

APPS_HOME=/opt/apps


[ ! -d $APPS_HOME ] &&  echo "$APPS_HOME not exists !?" && exit 1
[ `whoami` != root ] && log_msg "install_green_apps you have to be root user !" E && exit 1

cat /etc/sysconfig/ssl | grep -q yes || log_msg "curl ssl /opt/boot/ssl ERROR" E && exit 1


case "$1" in
  2) echo "install GREEN_APPS_2"
     INSTALL_SET="2"
     IND1="[ ]${RED}"
     IND2="[*]${GREEN}"
     IND3="[ ]${RED}"
     IND4="[ ]${RED}"
     ;;
  3) echo "install GREEN_APPS_3"
     INSTALL_SET="3"
     IND1="[ ]${RED}"
     IND2="[ ]${RED}"
     IND3="[*]${GREEN}"
     IND4="[ ]${RED}"
     IND9="[ ]${RED}"
     ;;
  4) echo "install GREEN_APPS_4"
     INSTALL_SET="4"
     IND1="[ ]${RED}"
     IND2="[ ]${RED}"
     IND3="[ ]${RED}"
     IND4="[*]${GREEN}"
     IND9="[ ]${RED}"
     ;;
  9) echo "install GREEN_APPS_9"
     INSTALL_SET="9"
     IND1="[ ]${RED}"
     IND2="[ ]${RED}"
     IND3="[ ]${RED}"
     IND4="[ ]${RED}"
     IND9="[*]${GREEN}"
     ;;
  *) echo "install GREEN_APPS"
     INSTALL_SET="1"
     IND1="[*]${GREEN}"
     IND2="[ ]${RED}"
     IND3="[ ]${RED}"
     IND4="[ ]${RED}"
     IND9="[ ]${RED}"
     ;;
esac

if [ "$INSTALL_SET" == "9" ] ; then
     shift
     for app in $@ ; do
         case $app in
           green)
             GREEN_APPS_9+=" green_${GREEN_APPS_VER}"
             ;;
           blue)
               GREEN_APPS_9+=" blue_${BLUE_APPS_VER}"
               ;;
           k8s)
             GREEN_APPS_9+=" k8s_${K8S_VER}"
             ;;
           virtualbox|vbox|vbox)
             green_apps_9+=" virtualbox_${vbox_ver}"
             ;;
           vagrant)
             GREEN_APPS_9+=" vagrant_${VAGRANT_VER}"
             ;;
           developer)
             GREEN_APPS_9+=" developer_${DEVELOPER_VER}"
             ;;
           java)
             GREEN_APPS_9+=" java_${JAVA_VER}"
             ;;
           go)
             GREEN_APPS_9+=" go_${GO_VER}"
             ;;
           x11)
             GREEN_APPS_9+=" x11_${X11_APPS_VER}"
             ;;
           node)
             GREEN_APPS_9+=" node_${NODE_VER}"
             ;;
           python2)
             GREEN_APPS_9+=" python2_${PYTHON2_VER}"
             ;;
           perl)
               GREEN_APPS_9+=" perl_${PERL_VER}"
               ;;
           idea)
             GREEN_APPS_9+=" idea_${IDEA_VER}"
             ;;
           code)
             GREEN_APPS_9+=" code_${CODE_VER}"
              ;;
           atom)
              GREEN_APPS_9+=" atom_${ATOM_VER}"
              ;;
           aws)
              GREEN_APPS_9+=" aws_${AWS_VER}"
              ;;
         esac
     done

else

  if [ -z "$GREEN_APPS" ] ; then
    GREEN_APPS="docker_$DOCKER_VERSION green_${GREEN_APPS_VER}"
    GREEN_APPS+=" python2_$PYTHON2_VER vim_$VIM_VER"
  fi
  if [ -z "$GREEN_APPS_2" ] ; then
    GREEN_APPS_2="blue_${BLUE_APPS_VER}"
    GREEN_APPS_2+=" perl_$PERL_VER java_${JAVA_VER}"
  fi
  if [ -z "$GREEN_APPS_3" ] ; then
    GREEN_APPS_3="VirtualBox_$VBOX_VER vagrant_$VAGRANT_VER"
  fi
  #aws_${AWS_VER}
  #idea_${IDEA_VER} atom_${ATOM_VER} code_${CODE_VER}
  if [ -z "$GREEN_APPS_4" ] ; then
    GREEN_APPS_4="x11_${X11_APPS_VER} ruby_$RUBY_VER go_${GO_VER} node_${NODE_VER} developer_${DEVELOPER_VER} "
  fi

  echo "environment vars:"
  echo "-------------------------------------------------------------"
  echo "DOWNLOAD_URL: $DOWNLOAD_URL"
  echo "${IND1}   GREEN_APPS: ${GREEN_APPS}${NORMAL}"
  echo "${IND2} GREEN_APPS_2: ${GREEN_APPS_2}${NORMAL}"
  echo "${IND3} GREEN_APPS_3: ${GREEN_APPS_3}${NORMAL}"
  echo "${IND4} GREEN_APPS_4: ${GREEN_APPS_4}${NORMAL}"
  echo "${IND9} GREEN_APPS_9: ${GREEN_APPS_9}${NORMAL}"
fi

log_msg "===== download_green_apps start: $(date) ======"

[ "$INSTALL_SET" == "2" ] && GREEN_APPS="${GREEN_APPS_2}"  # install GREEN_APPS_2
[ "$INSTALL_SET" == "3" ] && GREEN_APPS="${GREEN_APPS_3}"
[ "$INSTALL_SET" == "4" ] && GREEN_APPS="${GREEN_APPS_4}"
[ "$INSTALL_SET" == "9" ] && GREEN_APPS="${GREEN_APPS_9}"  # install GREEN_APPS_9

if [ ! -d /opt/apps ] ; then
  log_msg "/opt/apps doesn't exists" R
  exit 1
fi


download_app() {

  EXIT_CODE=0
  app=$1
  ver=$2
  cd $APPS_HOME

  ext="xz"  # ext="gz"

  if [ -f ${app}_${ver}.tar.${ext}.download ] ; then
    log_msg "CANCEL: curl $DOWNLOAD_URL/${app}_${ver}.tar.${ext}, another download in progress" Y
    exit 1
  fi

   LOCAL_MEDIA=/media/GREEN_INIT/apps/${app}_${ver}.tar.${ext}
   if [ -f $LOCAL_MEDIA ] ; then
      log_msg "getting from /media/GREEN_INIT/apps/${app}_${ver}.tar.${ext} ..." B
      cp $LOCAL_MEDIA $APPS_HOME/
   else
      log_msg "START: curl $DOWNLOAD_URL/${app}_${ver}.tar.${ext}" B
      cd $APPS_HOME
      touch ${app}_${ver}.tar.${ext}.download
      curl -s -LO $DOWNLOAD_URL/${app}_${ver}.tar.${ext}
   fi

   if [ $? -ne 0 ] ; then
        log_msg "ERROR: CURL: $DOWNLOAD_URL/${app}_${ver}.tar.${ext}" R
        rm ${app}_${ver}.tar.${ext}
        rm ${app}_${ver}.tar.${ext}.download
        return 127
   else
        if ! tar -tf ${app}_${ver}.tar.${ext} > /dev/null 2>&1
        then
           SIZE=`ls -lh ${app}_${ver}.tar.${ext} | awk '{print $5}'`
           MD5SUM=`/usr/bin/md5sum ${app}_${ver}.tar.${ext}  | awk '{print $1}'`
           log_msg "${app}_${ver}.tar.${ext} is not valid tar, size $SIZE, md5sum: $MD5SUM" R
           rm ${app}_${ver}.tar.${ext}
           rm ${app}_${ver}.tar.${ext}.download
           return 127
        fi

        if [ "$app" == "docker" ] ; then
           log_msg "DOCKER STOP BEFORE_NEW_VER: ${ver} /etc/init.d/docker stop"
            /etc/init.d/docker stop
        fi
        umount_opt ${app}
        cd $APPS_HOME
        rm -rf ${app} # delete old version
	      if tar xf ${app}_${ver}.tar.${ext} 2>&1 | tee -a $LOG_FILE ; then
              log_msg "SUCCESS: curl $DOWNLOAD_URL/${app}_${ver}.tar.${ext}" G
              chown -R root:root ${app}
              echo ${ver} > /opt/apps/${app}/VERSION
              mount_bind_opt_apps ${app}
              [ "$app" == "VirtualBox" ] && vbox_fix_permissions
              if [ "$app" == "docker" ] ; then
                 log_msg "DOCKER NEW_VER: ${ver} /etc/init.d/docker start" G
                 /etc/init.d/docker start
              fi
              ldcache_update
              EXIT_CODE=0
        else
              log_msg "ERROR: TARXF: curl=> $DOWNLOAD_URL/${app}_${ver}.tar.${ext}, error tar tf $APPS_HOME/${app}_${ver}.tar.${ext} (PATH: $PATH, LD_LIBRARY_PATH: $LD_LIBRARY_PATH)"
              EXIT_CODE=132
        fi
        cd $APPS_HOME
        rm ${app}_${ver}.tar.${ext}
        rm ${app}_${ver}.tar.${ext}.download
        return $EXIT_CODE

   fi

}

for appver in $GREEN_APPS; do

   # e.g. VirtualBox_5.0.10
   app=$( echo $appver | cut -d"_" -f1 )
   ver=$( echo $appver | cut -d"_" -f2 )

   if $(grep -q \/opt\/apps /proc/mounts) && [ ! -d /opt/apps/${app} ] ; then
         download_app ${app} ${ver} &
   fi

   if [ -d /opt/apps/${app} ] ; then
       installed_ver=`cat /opt/apps/${app}/VERSION`
       if [ "$installed_ver" != "${ver}" ] ; then
           log_msg "${app} installed version is ${installed_ver}, going to download and  install ${ver} !"
           download_app ${app} ${ver} &
       fi
   fi

done
