#!/bin/bash

. /etc/green_common
. /etc/init.d/tc-functions

APPS_HOME=/opt/apps

[ ! -d $APPS_HOME ] &&  echo "$APPS_HOME not exists !?" && exit 1

[ `whoami` != root ] && echo "you have to be root user !" && exit 1

case "$1" in
  2) echo "install GREEN_APPS_2"
     INSTALL_SET="2"
     IND1="[ ]${RED}"
     IND2="[*]${GREEN}"
     IND3="[ ]${RED}"
     IND4="[ ]${RED}"
     ;;
  3) echo "install GREEN_APPS_3"
     INSTALL_SET="3"
     IND1="[ ]${RED}"
     IND2="[ ]${RED}"
     IND3="[*]${GREEN}"
     IND4="[ ]${RED}"
     IND9="[ ]${RED}"
     ;;
  4) echo "install GREEN_APPS_4"
     INSTALL_SET="4"
     IND1="[ ]${RED}"
     IND2="[ ]${RED}"
     IND3="[ ]${RED}"
     IND4="[*]${GREEN}"
     IND9="[ ]${RED}"
     ;;
  9) echo "install GREEN_APPS_9"
     INSTALL_SET="9"
     IND1="[ ]${RED}"
     IND2="[ ]${RED}"
     IND3="[ ]${RED}"
     IND4="[ ]${RED}"
     IND9="[*]${GREEN}"
     ;;
  *) echo "install GREEN_APPS"
     INSTALL_SET="1"
     IND1="[*]${GREEN}"
     IND2="[ ]${RED}"
     IND3="[ ]${RED}"
     IND4="[ ]${RED}"
     IND9="[ ]${RED}"
     ;;

esac

GREEN_BINTRAY=${GREEN_BINTRAY:-https://dl.bintray.com/hernad/greenbox}


if [ "$INSTALL_SET" == "9" ] ; then
     shift
     for app in $@ ; do
         case $app in
           k8s)
             GREEN_APPS_9+=" k8s_${K8S_VER}"
             ;;
           virtualbox|vbox|vbox)
             green_apps_9+=" virtualbox_${vbox_ver}"
             ;;
           vagrant)
             GREEN_APPS_9+=" vagrant_${VAGRANT_VER}"
             ;;
           developer)
             GREEN_APPS_9+=" developer_${DEVELOPER_VER}"
             ;;
           java)
             GREEN_APPS_9+=" java_${JAVA_VER}"
             ;;
           go)
             GREEN_APPS_9+=" go_${GO_VER}"
             ;;
           x11)
             GREEN_APPS_9+=" x11_${X11_APPS_VER}"
             ;;
           node)
             GREEN_APPS_9+=" node_${NODE_VER}"
             ;;
           python2)
             GREEN_APPS_9+=" python2_${PYTHON2_VER}"
             ;;
         esac
     done

else
  if [ -z "$GREEN_APPS" ] ; then
    GREEN_APPS="docker_$DOCKER_VERSION green_$GREEN_APPS_VER"
    GREEN_APPS+=" python2_$PYTHON2_VER vim_$VIM_VER"
  fi
  if [ -z "$GREEN_APPS_2" ] ; then
    GREEN_APPS_2="x11_${X11_APPS_VER} VirtualBox_$VBOX_VER vagrant_$VAGRANT_VER"
    GREEN_APPS_2+=" perl_$PERL_VER ruby_$RUBY_VER java_${JAVA_VER} go_${GO_VER} node_${NODE_VER}"
  fi

  if [ -z "$GREEN_APPS_3" ] ; then
    GREEN_APPS_3="aws_${AWS_VER} "
    GREEN_APPS_3+=" idea_${IDEA_VER} atom_${ATOM_VER} code_${CODE_VER}"
  fi

  if [ -z "$GREEN_APPS_4" ] ; then
    GREEN_APPS_4="developer_${DEVELOPER_VER} "
  fi
  echo "environment vars:"
  echo "-------------------------------------------------------------"
  echo "GREEN_BINTRAY: $GREEN_BINTRAY"
  echo "${IND1}   GREEN_APPS: ${GREEN_APPS}${NORMAL}"
  echo "${IND2} GREEN_APPS_2: ${GREEN_APPS_2}${NORMAL}"
  echo "${IND3} GREEN_APPS_3: ${GREEN_APPS_3}${NORMAL}"
  echo "${IND4} GREEN_APPS_4: ${GREEN_APPS_4}${NORMAL}"
  echo "${IND9} GREEN_APPS_9: ${GREEN_APPS_4}${NORMAL}"
fi

echo ===== download_green_apps start: $(date) ====== >> $LOG_FILE

[ "$INSTALL_SET" == "2" ] && GREEN_APPS="${GREEN_APPS_2}"  # install GREEN_APPS_2
[ "$INSTALL_SET" == "3" ] && GREEN_APPS="${GREEN_APPS_3}"
[ "$INSTALL_SET" == "4" ] && GREEN_APPS="${GREEN_APPS_4}"
[ "$INSTALL_SET" == "9" ] && GREEN_APPS="${GREEN_APPS_9}"  # install GREEN_APPS_9

if [ ! -d /opt/apps ] ; then
  log_msg "/opt/apps doesn't exists"
  exit 1
fi


download_app() {

  app=$1
  ver=$2

  cd $APPS_HOME

  ext="xz"  # ext="gz"

  [ -f /opt/apps/${app}_${ver}.tar.${ext} ] && echo "download in progres STOP!" && return

   LOCAL_MEDIA=/media/GREEN_INIT/apps/${app}_${ver}.tar.${ext}
   if [ -f $LOCAL_MEDIA ] ; then
      log_msg "getting from /media/GREEN_INIT/apps/${app}_${ver}.tar.${ext} ..."
      cp $LOCAL_MEDIA $APPS_HOME/
   else
      echo "downloading: $GREEN_BINTRAY/${app}_${ver}.tar.${ext} ..."
      log_msg "START: curl $GREEN_BINTRAY/${app}_${ver}.tar.${ext}"
      cd $APPS_HOME
      curl -s -LO $GREEN_BINTRAY/${app}_${ver}.tar.${ext}
   fi

   if [ $? -ne 0 ] ; then
        log_msg "ERROR: curl $GREEN_BINTRAY/${app}_${ver}.tar.${ext}"
        return 127
   else
        if ! tar -tf ${app}_${ver}.tar.${ext} > /dev/null 2>&1
        then
           log_msg "${app}_${ver}.tar.${ext} is not valid tar"
           rm ${app}_${ver}.tar.${ext}
           return 127
        fi

        umount_opt ${app}
        cd $APPS_HOME
        rm -rf ${app} # delete old version
	      if tar xf ${app}_${ver}.tar.${ext} 2>&1 | tee -a $LOG_FILE ; then
              log_msg "SUCCESS: curl $GREEN_BINTRAY/${app}_${ver}.tar.${ext}"
              rm ${app}_${ver}.tar.${ext}
              chown -R root:root ${app}
              echo ${ver} > /opt/apps/${app}/VERSION
              log_msg "mount_bind_opt_apps ${app}"
              mount_bind_opt_apps ${app}
              [ "$app" == "VirtualBox" ] && vbox_fix_permissions
              if [ "$app" == "docker" ] ; then
                 echo "DOCKER `cat $BOOT_DIR/etc/sysconfig/docker` -> ${ver} /etc/init.d/docker stop, start" >> $LOG_FILE
                 echo ${ver} > $BOOT_DIR/etc/sysconfig/docker # set docker new version
                 /etc/init.d/docker stop
                 /etc/init.d/docker start
              fi
              ldcache_update
        else
              log_msg "ERROR: curl=> $GREEN_BINTRAY/${app}_${ver}.tar.${ext}, error tar tf $APPS_HOME/${app}_${ver}.tar.${ext} (PATH: $PATH, LD_LIBRARY_PATH: $LD_LIBRARY_PATH)"
        fi
   fi

}

for appver in $GREEN_APPS; do

   # e.g. VirtualBox_5.0.10
   app=$( echo $appver | cut -d"_" -f1 )
   ver=$( echo $appver | cut -d"_" -f2 )

   if $(grep -q \/opt\/apps /proc/mounts) && [ ! -d /opt/apps/${app} ] ; then
         download_app ${app} ${ver} &
   fi

   if [ -d /opt/apps/${app} ] ; then
       installed_ver=`cat /opt/apps/${app}/VERSION`
       if [ "$installed_ver" != "${ver}" ] ; then
           log_msg "${app} installed version is ${installed_ver}, going to download and  install ${ver} !"
           download_app ${app} ${ver} &
       fi
   fi

done
