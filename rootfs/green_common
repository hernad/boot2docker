#!/bin/sh

DATE=`date +'%Y%m%d %T'`

GREENBOX_VERSION=`cat /etc/sysconfig/greenbox`
KERNEL_VERSION=`uname -r | sed -e 's/-greenbox//'`
DOCKER_VERSION=`cat /etc/sysconfig/docker`

GREEN_APPS_VER=___GREEN_VER___
VBOX_VER=5.1.18
X11_APPS_VER=3.1.0
VIM_VER=8.0.62
PYTHON2_VER=2.7.12
RUBY_VER=2.3.1
VAGRANT_VER=1.9.2
GO_VER=1.7.3
NODE_VER=6.9.1
PERL_VER=5.24.0

JAVA_VER=8.112.15
IDEA_VER=2016.5.2
ATOM_VER=1.12.0
CODE_VER=1.7.1
AWS_VER=1.11.13

BOOT_DIR=/opt/boot

set_log_file() {
[ -f /opt/boot/etc/profile ] && source /opt/boot/etc/profile

if [ -d /opt/boot/log ]
then
  LOG_FILE=/var/log/greenbox.log
else
  LOG_FILE=/var/log/greenbox_0.log
fi

export LOG_FILE
}


log_msg() {
  echo "$0 $DATE: $1" >> $LOG_FILE
}

mountedOnGreen() {
  (cat /proc/mounts | grep -q "^green/$1")
}

mountedApp() {
  (cat /proc/mounts | grep -q "opt_apps /opt/$1")
}

mount_bind_opt_apps() {

if [ -d /opt/apps/$1 ] ; then
  if ! $(grep -q \/opt\/$1 /proc/mounts) ; then
    echo mkdir, mount /opt/apps/$1 ...
    sudo mkdir -p /opt/$1
    sudo mount --bind /opt/apps/$1 /opt/$1 >> $LOG_FILE
    log_msg "/opt/$1 bind mounted"
  fi
fi

}

umount_opt() {

if [ -d /opt/apps/$1 ] ; then
  if  $(grep -q \/opt\/$1 /proc/mounts) ; then
    sudo umount -f -l /opt/$1 >> $LOG_FILE
  fi
fi

}

mount_all_apps() {

for app in `ls -1 /opt/apps`
do
   [ -d /opt/apps/${app} ] && ( ! mountedApp ${app} ) && mount_bind_opt_apps ${app}
done

}

zfs_up() {
  zfs list | grep -q green
}

is_vbox () {
  lshw | grep -q "product: VirtualBox"
}


wait_zvol_up () {

retry=0
while [ ! -e /dev/zvol/$1/$2 ] &&  [ $retry -lt 12 ]
do
   log_msg "waiting zvol $retry $1 $2 up"
   sleep 1
   let retry=retry+1
done

}


set_path_ld_library() {

LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:/lib
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/bin:/usr/sbin:$BOOT_DIR/bin

for appdir in `ls -1 /opt`
do
   if [ -d /opt/$appdir/lib ] ; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/$appdir/lib
   fi

   if [ -d /opt/$appdir/bin ] ; then
      PATH=/opt/$appdir/bin:$PATH
   else
      if  [ -d /opt/$appdir ] && [ "$appdir" != "apps" ] && [ "$appdir" != "boot" ] ; then
         export PATH=/opt/$appdir:$PATH
      fi
   fi
done
}

change_user_password() {
   echo "$1:$2" | chpasswd -m
}

vbox_fix_permissions() {
  VBOX_DIR=/opt/apps/VirtualBox
  if [ -d $VBOX_DIR ] ; then
    # VirtualBox execs has to be root
    [ "rootroox" == `ls -ld $VBOX_DIR | awk '{print $3 $4;}'` ] || \
       chown root:root -R $VBOX_DIR
    chmod u+s $VBOX_DIR/VirtualBox $VBOX_DIR/VBoxHeadless
    chmod g-w /opt
    chmod g-w /opt/VirtualBox
  fi
}

echo_line() {
  echo "------------------------------$1----------------------------------"
}

setup_symlinks_and_commands() {


# git helpers location green -> /usr/local
DIR=/opt/green
SRC_LINK=/opt/green/lib/git-core
LINK=/usr/local/lib/git-core
[ -d $DIR ] && [ ! -h $LINK ] && sudo ln -s $SRC_LINK $LINK

SRC_LINK=/opt/green/share/git-core
LINK=/usr/local/share/git-core
[ -d $DIR ] && [ ! -h $LINK ] && sudo ln -s $SRC_LINK $LINK


# setup idea run script
[ -d /opt/idea ] && [ ! -f $BOOT_DIR/bin/idea ] &&  (cat > $BOOT_DIR/bin/idea <<- EOF
#!/bin/sh
echo "params: \$@"
/opt/idea/bin/idea.sh \$@ &
EOF
) && chmod +x $BOOT_DIR/bin/idea

# atom run script
[ -d /opt/atom ] && [ ! -f $BOOT_DIR/bin/atom ] &&  (cat > $BOOT_DIR/bin/atom <<- EOF
#!/bin/sh
echo "params: \$@"
/opt/atom/atom \$@ &
EOF
) && chmod +x $BOOT_DIR/bin/atom

# vi -> vim
LINK=/usr/local/bin/vi
SRC_LINK=/opt/vim/bin/vim
[ -d /opt/vim ] && [ ! -h $LINK ] && sudo ln -s $SRC_LINK $LINK

}

ldcache_update() {

  DIR=/opt/boot/etc
  SRC_LINK=/opt/boot/etc/ld.so.cache
  LINK=/etc/ld.so.cache
  log_msg "ldconfg after mounting apps"
  [ -f $LINK ] && rm $LINK
  /sbin/ldconfig  -C $SRC_LINK  >/dev/null 2>&1
  [ -d $DIR ] && [ ! -h $LINK ] && sudo ln -s $SRC_LINK $LINK
}

GREEN_DEBUG=${GREEN_DEBUG:-1}
set_log_file
